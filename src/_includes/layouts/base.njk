{% set assetHash = global.random() %}
<!DOCTYPE html>
<html lang="en" data-theme="default">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title> {{title}} :: bitbyte.blog </title>
    <style>
      {% include "css/critical.css" %}
    </style>

    <link
      rel="preload"
      href="/assets/fonts/FreePixel.ttf"
      as="font"
      type="font/ttf"
      crossorigin="anonymous"
    />
    <link
      rel="apple-touch-icon"
      sizes="57x57"
      href="{{'/assets/favicon/apple-icon-57x57.png' | url}}"
    />
    <link
      rel="apple-touch-icon"
      sizes="60x60"
      href="{{'/assets/favicon/apple-icon-60x60.png' | url }}"
    />
    <link
      rel="apple-touch-icon"
      sizes="72x72"
      href="{{'/assets/favicon/apple-icon-72x72.png' | url }}"
    />
    <link
      rel="apple-touch-icon"
      sizes="76x76"
      href="{{'/assets/favicon/apple-icon-76x76.png' | url }}"
    />
    <link
      rel="apple-touch-icon"
      sizes="114x114"
      href="{{'/assets/favicon/apple-icon-114x114.png' | url }}"
    />
    <link
      rel="apple-touch-icon"
      sizes="120x120"
      href="{{'/assets/favicon/apple-icon-120x120.png' | url }}"
    />
    <link
      rel="apple-touch-icon"
      sizes="144x144"
      href="{{'/assets/favicon/apple-icon-144x144.png' | url }}"
    />
    <link
      rel="apple-touch-icon"
      sizes="152x152"
      href="{{'/assets/favicon/apple-icon-152x152.png' | url }}"
    />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="{{'/assets/favicon/apple-icon-180x180.png' | url }}"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="192x192"
      href="{{'/assets/favicon/android-icon-192x192.png' | url }}"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="{{'/assets/favicon/favicon-32x32.png' | url }}"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="96x96"
      href="{{'/assets/favicon/favicon-96x96.png' | url }}"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="{{'/assets/favicon/favicon-16x16.png' | url }}"
    />
    <link rel="manifest" href="{{'/assets/favicon/manifest.json' | url }} " />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta
      name="msapplication-TileImage"
      content="{{'/assets/favicon/ms-icon-144x144.png' | url }}"
    />
    <meta name="theme-color" content="#ffffff" />

    {# Add facility for pages to delare an array of critical styles #} {% if
    pageCriticalStyles %} {% for item in pageCriticalStyles %}
    <style>
      {% include item %}
    </style>
    {% endfor %} {% endif %}

    <link
      rel="preload"
      media="print"
      href="/fonts/fonts.css?{{ assetHash }}"
      onload="this.media='all'"
    />

    <link
      rel="alternate"
      type="application/rss+xml"
      href="{{ site.url }}/feed.xml"
    />

    {% include "partials/meta.njk" %} {# Add facility for pages to declare an
    array of stylesheet paths #} {% if pageStylesheets %} {% for item in
    pageStylesheets %}
    <link
      rel="stylesheet"
      media="print"
      href="{{ item }}?{{ assetHash }}"
      onload="this.media='all'"
    />
    {% endfor %} {% endif %}
  </head>
  <body>
    <div class="filter"></div>
    <svg style="display: none">
      <filter id="advanced-dither-global">
        <feTurbulence
          type="fractalNoise"
          baseFrequency="0.8"
          numOctaves="5"
          seed="42"
        />
        <feColorMatrix
          type="matrix"
          values="0.3 0.3 0.3 0 0
          0.3 0.3 0.3 0 0
          0.3 0.3 0.3 0 0
          0   0   0   1 0"
        />

        <feOffset dx="0.5" dy="0.5" />
        <feDisplacementMap
          id="turbulence"
          in="SourceGraphic"
          in2="turbulence"
          scale="1"
        />
        <feGaussianBlur stdDeviation="0.1" />
        <feComponentTransfer>
          <feFuncA id="transfer" type="linear" slope="0.18" />
        </feComponentTransfer>
        <feBlend mode="normal" in2="SourceGraphic" />
      </filter>
    </svg>
    <svg style="display: none">
      <filter id="advanced-dither-global-2">
        <feTurbulence type="fractalNoise" baseFrequency="5" numOctaves="1" />
        <feColorMatrix
          in="turbulence"
          type="matrix"
          values="10 0 0 0 -5
          10 0 0 0 -5
          10 0 0 0 -5
          0 0 0 1 0"
        />
        <feDisplacementMap in="SourceGraphic" in2="turbulence" scale="20" />
        <feGaussianBlur stdDeviation="0.1" />
        <feBlend mode="soft-light" in2="SourceGraphic" />
      </filter>
    </svg>
    <div class="layout">
      {% include "partials/header.njk" %} {% include "partials/site-nav.njk" %}
      <main tabindex="-1" id="main-content" class="[ main-content ]">
        {% set pageHeaderTitle = title %} {% set summary = pageHeaderSummary or
        description %} {% if pageHeaderTitle %}
        <div
          class="[ main-content__page-header ]"
          data-layout="{{ 'row' if date else 'column'}}"
        >
          <div class="[ main-content__page-header__info ]">
            <h5 class="[ main-content__page-header__info__title ]">
              {{title | safe }}
            </h5>
            {% if summary %}
            <h6 class="[ main-content__page-header__info__summary ]">
              {{summary | safe }}
            </h6>
            {% endif%}
          </div>
          {% if date %}
          <time
            class="[ main-content__page-header__date ]"
            datetime="{{date | postDate }}"
            >:: {{ date | postDate }} ::</time
          >
          {% endif%}
        </div>
        {% endif%}
        <section class="content">{% block content %}{% endblock %}</section>
      </main>
      {% include "partials/footer.njk" %}
    </div>
    <script>
      let stats = document.querySelector('#stats');
      window.goatcounter.visit_count({ append: stats });
    </script>

    <script
      data-goatcounter="https://bitbyte.goatcounter.com/count"
      async
      src="//gc.zgo.at/count.js"
    ></script>
    <script type="text/javascript" defer>
      const currentTheme = localStorage.getItem('theme');
      if (currentTheme) {
        document.documentElement.setAttribute('data-theme', currentTheme);
      }

      const select = document.getElementById('theme-input');

      if (select) {
        select.value = currentTheme || 'default';
      }
      select.addEventListener('change', (event) => {
        const theme = event.target.value;
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
      });
    </script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const dustBtn = document.querySelector('#dust');
        const animation = document.querySelector('#turbulence');
        const noiseCheckbox = document.querySelector('#noiseCheckbox');
        const savedState = localStorage.getItem('noiseEnabled');
        const isMobile = window.matchMedia('(max-width: 768px)').matches;
        const defaultNoiseState = isMobile ? true : false;
        const noiseEnabled =
          savedState !== null ? JSON.parse(savedState) : defaultNoiseState;

        const keyframes = [1000, 1500, 2000, 2500, 3000, 2500, 2000, 1500];
        const duration = 10000;
        let startTime = Date.now();
        let animationId = null;
        let isAnimating = false;

        function animate() {
          if (!isAnimating) return;

          const elapsed = Date.now() - startTime;
          const progress = Math.min(elapsed / duration, 1);

          // Calculate current keyframe
          const keyframeIndex = progress * (keyframes.length - 1);
          const lowerIndex = Math.floor(keyframeIndex);
          const upperIndex = Math.ceil(keyframeIndex);
          const fraction = keyframeIndex - lowerIndex;

          // Interpolate between keyframes
          const currentValue =
            keyframes[lowerIndex] +
            (keyframes[upperIndex] - keyframes[lowerIndex]) * fraction;

          animation.setAttribute('scale', currentValue);

          if (progress < 1) {
            requestAnimationFrame(animate);
          } else {
            // Reiniciar cuando termine
            startTime = Date.now();
            requestAnimationFrame(animate);
          }
        }

        function startAnimation() {
          if (!isAnimating) {
            isAnimating = true;
            startTime = Date.now();
            animate();
          }
        }

        function stopAnimation() {
          isAnimating = false;
          if (animationId) {
            cancelAnimationFrame(animationId);
            animationId = null;
          }
          // Reset to initial state
          animation.setAttribute('scale', keyframes[0]);
          animation.setAttribute('scale', '0');
        }

        if (noiseCheckbox) {
          noiseCheckbox.checked = noiseEnabled;
          noiseCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            localStorage.setItem('noiseEnabled', JSON.stringify(isChecked));

            if (isChecked) {
              stopAnimation();
            } else {
              startAnimation();
            }
          });

          // Start animation if checkbox is initially checked
          if (noiseEnabled) {
            stopAnimation();
          } else {
            startAnimation();
          }
        } else {
          startAnimation();
        }
      });
    </script>
  </body>
</html>
